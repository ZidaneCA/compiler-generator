/* This file was generated by SableCC (http://www.sablecc.org/). */

package Calculator.parser;

import Calculator.lexer.*;
import Calculator.node.*;
import Calculator.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PExpr node1 = (PExpr) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AFactorExpr */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce APlusExpr */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list, false);
            }
            break;
            case 2: /* reduce AMinusExpr */
            {
                ArrayList<Object> list = new2();
                push(goTo(0), list, false);
            }
            break;
            case 3: /* reduce ATermFactor */
            {
                ArrayList<Object> list = new3();
                push(goTo(1), list, false);
            }
            break;
            case 4: /* reduce AMultFactor */
            {
                ArrayList<Object> list = new4();
                push(goTo(1), list, false);
            }
            break;
            case 5: /* reduce ADivFactor */
            {
                ArrayList<Object> list = new5();
                push(goTo(1), list, false);
            }
            break;
            case 6: /* reduce AModFactor */
            {
                ArrayList<Object> list = new6();
                push(goTo(1), list, false);
            }
            break;
            case 7: /* reduce ANumberTerm */
            {
                ArrayList<Object> list = new7();
                push(goTo(2), list, false);
            }
            break;
            case 8: /* reduce AVarTerm */
            {
                ArrayList<Object> list = new8();
                push(goTo(2), list, false);
            }
            break;
            case 9: /* reduce AFuncTerm */
            {
                ArrayList<Object> list = new9();
                push(goTo(2), list, false);
            }
            break;
            case 10: /* reduce AExprTerm */
            {
                ArrayList<Object> list = new10();
                push(goTo(2), list, false);
            }
            break;
            case 11: /* reduce ASqrtFunc */
            {
                ArrayList<Object> list = new11();
                push(goTo(3), list, false);
            }
            break;
            case 12: /* reduce ACbrtFunc */
            {
                ArrayList<Object> list = new12();
                push(goTo(3), list, false);
            }
            break;
            case 13: /* reduce ASinFunc */
            {
                ArrayList<Object> list = new13();
                push(goTo(3), list, false);
            }
            break;
            case 14: /* reduce ATanFunc */
            {
                ArrayList<Object> list = new14();
                push(goTo(3), list, false);
            }
            break;
            case 15: /* reduce ASinhFunc */
            {
                ArrayList<Object> list = new15();
                push(goTo(3), list, false);
            }
            break;
            case 16: /* reduce ATanhFunc */
            {
                ArrayList<Object> list = new16();
                push(goTo(3), list, false);
            }
            break;
            case 17: /* reduce AAsinFunc */
            {
                ArrayList<Object> list = new17();
                push(goTo(3), list, false);
            }
            break;
            case 18: /* reduce AAtanFunc */
            {
                ArrayList<Object> list = new18();
                push(goTo(3), list, false);
            }
            break;
            case 19: /* reduce ALogFunc */
            {
                ArrayList<Object> list = new19();
                push(goTo(3), list, false);
            }
            break;
            case 20: /* reduce ALnFunc */
            {
                ArrayList<Object> list = new20();
                push(goTo(3), list, false);
            }
            break;
            case 21: /* reduce AExpFunc */
            {
                ArrayList<Object> list = new21();
                push(goTo(3), list, false);
            }
            break;
            case 22: /* reduce ACosFunc */
            {
                ArrayList<Object> list = new22();
                push(goTo(3), list, false);
            }
            break;
            case 23: /* reduce AAcosFunc */
            {
                ArrayList<Object> list = new23();
                push(goTo(3), list, false);
            }
            break;
            case 24: /* reduce ACoshFunc */
            {
                ArrayList<Object> list = new24();
                push(goTo(3), list, false);
            }
            break;
            case 25: /* reduce APowerFunc */
            {
                ArrayList<Object> list = new25();
                push(goTo(3), list, false);
            }
            break;
            case 26: /* reduce AAffectFunc */
            {
                ArrayList<Object> list = new26();
                push(goTo(3), list, false);
            }
            break;
            case 27: /* reduce AFactFunc */
            {
                ArrayList<Object> list = new27();
                push(goTo(3), list, false);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AFactorExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PFactor pfactorNode2;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);

        pexprNode1 = new AFactorExpr(pfactorNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce APlusExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        TPlus tplusNode3;
        PFactor pfactorNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        pfactorNode4 = (PFactor)nodeArrayList3.get(0);

        pexprNode1 = new APlusExpr(pexprNode2, tplusNode3, pfactorNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AMinusExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        TMinus tminusNode3;
        PFactor pfactorNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        tminusNode3 = (TMinus)nodeArrayList2.get(0);
        pfactorNode4 = (PFactor)nodeArrayList3.get(0);

        pexprNode1 = new AMinusExpr(pexprNode2, tminusNode3, pfactorNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce ATermFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PTerm ptermNode2;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);

        pfactorNode1 = new ATermFactor(ptermNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AMultFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PFactor pfactorNode2;
        TMult tmultNode3;
        PTerm ptermNode4;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);
        tmultNode3 = (TMult)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        pfactorNode1 = new AMultFactor(pfactorNode2, tmultNode3, ptermNode4);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce ADivFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PFactor pfactorNode2;
        TDiv tdivNode3;
        PTerm ptermNode4;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);
        tdivNode3 = (TDiv)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        pfactorNode1 = new ADivFactor(pfactorNode2, tdivNode3, ptermNode4);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AModFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PFactor pfactorNode2;
        TMod tmodNode3;
        PTerm ptermNode4;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);
        tmodNode3 = (TMod)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        pfactorNode1 = new AModFactor(pfactorNode2, tmodNode3, ptermNode4);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce ANumberTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TNumber tnumberNode2;
        tnumberNode2 = (TNumber)nodeArrayList1.get(0);

        ptermNode1 = new ANumberTerm(tnumberNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AVarTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TVar tvarNode2;
        tvarNode2 = (TVar)nodeArrayList1.get(0);

        ptermNode1 = new AVarTerm(tvarNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AFuncTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PFunc pfuncNode2;
        pfuncNode2 = (PFunc)nodeArrayList1.get(0);

        ptermNode1 = new AFuncTerm(pfuncNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AExprTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TLPar tlparNode2;
        PExpr pexprNode3;
        TRPar trparNode4;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        ptermNode1 = new AExprTerm(tlparNode2, pexprNode3, trparNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce ASqrtFunc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunc pfuncNode1;
        {
            // Block
        TSqrt tsqrtNode2;
        TLPar tlparNode3;
        PExpr pexprNode4;
        TRPar trparNode5;
        tsqrtNode2 = (TSqrt)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        pfuncNode1 = new ASqrtFunc(tsqrtNode2, tlparNode3, pexprNode4, trparNode5);
        }
	nodeList.add(pfuncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce ACbrtFunc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunc pfuncNode1;
        {
            // Block
        TCbrt tcbrtNode2;
        TLPar tlparNode3;
        PExpr pexprNode4;
        TRPar trparNode5;
        tcbrtNode2 = (TCbrt)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        pfuncNode1 = new ACbrtFunc(tcbrtNode2, tlparNode3, pexprNode4, trparNode5);
        }
	nodeList.add(pfuncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce ASinFunc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunc pfuncNode1;
        {
            // Block
        TSin tsinNode2;
        TLPar tlparNode3;
        PExpr pexprNode4;
        TRPar trparNode5;
        tsinNode2 = (TSin)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        pfuncNode1 = new ASinFunc(tsinNode2, tlparNode3, pexprNode4, trparNode5);
        }
	nodeList.add(pfuncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce ATanFunc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunc pfuncNode1;
        {
            // Block
        TTan ttanNode2;
        TLPar tlparNode3;
        PExpr pexprNode4;
        TRPar trparNode5;
        ttanNode2 = (TTan)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        pfuncNode1 = new ATanFunc(ttanNode2, tlparNode3, pexprNode4, trparNode5);
        }
	nodeList.add(pfuncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce ASinhFunc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunc pfuncNode1;
        {
            // Block
        TSinh tsinhNode2;
        TLPar tlparNode3;
        PExpr pexprNode4;
        TRPar trparNode5;
        tsinhNode2 = (TSinh)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        pfuncNode1 = new ASinhFunc(tsinhNode2, tlparNode3, pexprNode4, trparNode5);
        }
	nodeList.add(pfuncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce ATanhFunc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunc pfuncNode1;
        {
            // Block
        TTanh ttanhNode2;
        TLPar tlparNode3;
        PExpr pexprNode4;
        TRPar trparNode5;
        ttanhNode2 = (TTanh)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        pfuncNode1 = new ATanhFunc(ttanhNode2, tlparNode3, pexprNode4, trparNode5);
        }
	nodeList.add(pfuncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AAsinFunc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunc pfuncNode1;
        {
            // Block
        TAsin tasinNode2;
        TLPar tlparNode3;
        PExpr pexprNode4;
        TRPar trparNode5;
        tasinNode2 = (TAsin)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        pfuncNode1 = new AAsinFunc(tasinNode2, tlparNode3, pexprNode4, trparNode5);
        }
	nodeList.add(pfuncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AAtanFunc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunc pfuncNode1;
        {
            // Block
        TAtan tatanNode2;
        TLPar tlparNode3;
        PExpr pexprNode4;
        TRPar trparNode5;
        tatanNode2 = (TAtan)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        pfuncNode1 = new AAtanFunc(tatanNode2, tlparNode3, pexprNode4, trparNode5);
        }
	nodeList.add(pfuncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce ALogFunc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunc pfuncNode1;
        {
            // Block
        TLog tlogNode2;
        TLPar tlparNode3;
        PExpr pexprNode4;
        TRPar trparNode5;
        tlogNode2 = (TLog)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        pfuncNode1 = new ALogFunc(tlogNode2, tlparNode3, pexprNode4, trparNode5);
        }
	nodeList.add(pfuncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce ALnFunc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunc pfuncNode1;
        {
            // Block
        TLn tlnNode2;
        TLPar tlparNode3;
        PExpr pexprNode4;
        TRPar trparNode5;
        tlnNode2 = (TLn)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        pfuncNode1 = new ALnFunc(tlnNode2, tlparNode3, pexprNode4, trparNode5);
        }
	nodeList.add(pfuncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AExpFunc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunc pfuncNode1;
        {
            // Block
        TExp texpNode2;
        TLPar tlparNode3;
        PExpr pexprNode4;
        TRPar trparNode5;
        texpNode2 = (TExp)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        pfuncNode1 = new AExpFunc(texpNode2, tlparNode3, pexprNode4, trparNode5);
        }
	nodeList.add(pfuncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce ACosFunc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunc pfuncNode1;
        {
            // Block
        TCos tcosNode2;
        TLPar tlparNode3;
        PExpr pexprNode4;
        TRPar trparNode5;
        tcosNode2 = (TCos)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        pfuncNode1 = new ACosFunc(tcosNode2, tlparNode3, pexprNode4, trparNode5);
        }
	nodeList.add(pfuncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AAcosFunc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunc pfuncNode1;
        {
            // Block
        TAcos tacosNode2;
        TLPar tlparNode3;
        PExpr pexprNode4;
        TRPar trparNode5;
        tacosNode2 = (TAcos)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        pfuncNode1 = new AAcosFunc(tacosNode2, tlparNode3, pexprNode4, trparNode5);
        }
	nodeList.add(pfuncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce ACoshFunc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunc pfuncNode1;
        {
            // Block
        TCosh tcoshNode2;
        TLPar tlparNode3;
        PExpr pexprNode4;
        TRPar trparNode5;
        tcoshNode2 = (TCosh)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        pfuncNode1 = new ACoshFunc(tcoshNode2, tlparNode3, pexprNode4, trparNode5);
        }
	nodeList.add(pfuncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce APowerFunc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunc pfuncNode1;
        {
            // Block
        TPower tpowerNode2;
        TLPar tlparNode3;
        PExpr pexprNode4;
        TComma tcommaNode5;
        PFactor pfactorNode6;
        TRPar trparNode7;
        tpowerNode2 = (TPower)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        tcommaNode5 = (TComma)nodeArrayList4.get(0);
        pfactorNode6 = (PFactor)nodeArrayList5.get(0);
        trparNode7 = (TRPar)nodeArrayList6.get(0);

        pfuncNode1 = new APowerFunc(tpowerNode2, tlparNode3, pexprNode4, tcommaNode5, pfactorNode6, trparNode7);
        }
	nodeList.add(pfuncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AAffectFunc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunc pfuncNode1;
        {
            // Block
        TAffect taffectNode2;
        TLPar tlparNode3;
        TVar tvarNode4;
        TEqual tequalNode5;
        TNumber tnumberNode6;
        TRPar trparNode7;
        taffectNode2 = (TAffect)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        tvarNode4 = (TVar)nodeArrayList3.get(0);
        tequalNode5 = (TEqual)nodeArrayList4.get(0);
        tnumberNode6 = (TNumber)nodeArrayList5.get(0);
        trparNode7 = (TRPar)nodeArrayList6.get(0);

        pfuncNode1 = new AAffectFunc(taffectNode2, tlparNode3, tvarNode4, tequalNode5, tnumberNode6, trparNode7);
        }
	nodeList.add(pfuncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AFactFunc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunc pfuncNode1;
        {
            // Block
        TFact tfactNode2;
        TLPar tlparNode3;
        PExpr pexprNode4;
        TRPar trparNode5;
        tfactNode2 = (TFact)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        pfuncNode1 = new AFactFunc(tfactNode2, tlparNode3, pexprNode4, trparNode5);
        }
	nodeList.add(pfuncNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {0, SHIFT, 1}, {6, SHIFT, 2}, {10, SHIFT, 3}, {11, SHIFT, 4}, {12, SHIFT, 5}, {13, SHIFT, 6}, {14, SHIFT, 7}, {15, SHIFT, 8}, {16, SHIFT, 9}, {17, SHIFT, 10}, {18, SHIFT, 11}, {19, SHIFT, 12}, {20, SHIFT, 13}, {21, SHIFT, 14}, {22, SHIFT, 15}, {23, SHIFT, 16}, {24, SHIFT, 17}, {25, SHIFT, 18}, {26, SHIFT, 19}, {27, SHIFT, 20}, },
			{{-1, REDUCE, 7}, },
			{{-1, ERROR, 2}, {0, SHIFT, 1}, {6, SHIFT, 2}, {10, SHIFT, 3}, {11, SHIFT, 4}, {12, SHIFT, 5}, {13, SHIFT, 6}, {14, SHIFT, 7}, {15, SHIFT, 8}, {16, SHIFT, 9}, {17, SHIFT, 10}, {18, SHIFT, 11}, {19, SHIFT, 12}, {20, SHIFT, 13}, {21, SHIFT, 14}, {22, SHIFT, 15}, {23, SHIFT, 16}, {24, SHIFT, 17}, {25, SHIFT, 18}, {26, SHIFT, 19}, {27, SHIFT, 20}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 4}, {6, SHIFT, 26}, },
			{{-1, ERROR, 5}, {6, SHIFT, 27}, },
			{{-1, ERROR, 6}, {6, SHIFT, 28}, },
			{{-1, ERROR, 7}, {6, SHIFT, 29}, },
			{{-1, ERROR, 8}, {6, SHIFT, 30}, },
			{{-1, ERROR, 9}, {6, SHIFT, 31}, },
			{{-1, ERROR, 10}, {6, SHIFT, 32}, },
			{{-1, ERROR, 11}, {6, SHIFT, 33}, },
			{{-1, ERROR, 12}, {6, SHIFT, 34}, },
			{{-1, ERROR, 13}, {6, SHIFT, 35}, },
			{{-1, ERROR, 14}, {6, SHIFT, 36}, },
			{{-1, ERROR, 15}, {6, SHIFT, 37}, },
			{{-1, ERROR, 16}, {6, SHIFT, 38}, },
			{{-1, ERROR, 17}, {6, SHIFT, 39}, },
			{{-1, ERROR, 18}, {6, SHIFT, 40}, },
			{{-1, ERROR, 19}, {6, SHIFT, 41}, },
			{{-1, ERROR, 20}, {6, SHIFT, 42}, },
			{{-1, ERROR, 21}, {1, SHIFT, 43}, {2, SHIFT, 44}, {28, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, {3, SHIFT, 45}, {4, SHIFT, 46}, {5, SHIFT, 47}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 25}, {1, SHIFT, 43}, {2, SHIFT, 44}, {7, SHIFT, 48}, },
			{{-1, ERROR, 26}, {0, SHIFT, 1}, {6, SHIFT, 2}, {10, SHIFT, 3}, {11, SHIFT, 4}, {12, SHIFT, 5}, {13, SHIFT, 6}, {14, SHIFT, 7}, {15, SHIFT, 8}, {16, SHIFT, 9}, {17, SHIFT, 10}, {18, SHIFT, 11}, {19, SHIFT, 12}, {20, SHIFT, 13}, {21, SHIFT, 14}, {22, SHIFT, 15}, {23, SHIFT, 16}, {24, SHIFT, 17}, {25, SHIFT, 18}, {26, SHIFT, 19}, {27, SHIFT, 20}, },
			{{-1, ERROR, 27}, {0, SHIFT, 1}, {6, SHIFT, 2}, {10, SHIFT, 3}, {11, SHIFT, 4}, {12, SHIFT, 5}, {13, SHIFT, 6}, {14, SHIFT, 7}, {15, SHIFT, 8}, {16, SHIFT, 9}, {17, SHIFT, 10}, {18, SHIFT, 11}, {19, SHIFT, 12}, {20, SHIFT, 13}, {21, SHIFT, 14}, {22, SHIFT, 15}, {23, SHIFT, 16}, {24, SHIFT, 17}, {25, SHIFT, 18}, {26, SHIFT, 19}, {27, SHIFT, 20}, },
			{{-1, ERROR, 28}, {0, SHIFT, 1}, {6, SHIFT, 2}, {10, SHIFT, 3}, {11, SHIFT, 4}, {12, SHIFT, 5}, {13, SHIFT, 6}, {14, SHIFT, 7}, {15, SHIFT, 8}, {16, SHIFT, 9}, {17, SHIFT, 10}, {18, SHIFT, 11}, {19, SHIFT, 12}, {20, SHIFT, 13}, {21, SHIFT, 14}, {22, SHIFT, 15}, {23, SHIFT, 16}, {24, SHIFT, 17}, {25, SHIFT, 18}, {26, SHIFT, 19}, {27, SHIFT, 20}, },
			{{-1, ERROR, 29}, {0, SHIFT, 1}, {6, SHIFT, 2}, {10, SHIFT, 3}, {11, SHIFT, 4}, {12, SHIFT, 5}, {13, SHIFT, 6}, {14, SHIFT, 7}, {15, SHIFT, 8}, {16, SHIFT, 9}, {17, SHIFT, 10}, {18, SHIFT, 11}, {19, SHIFT, 12}, {20, SHIFT, 13}, {21, SHIFT, 14}, {22, SHIFT, 15}, {23, SHIFT, 16}, {24, SHIFT, 17}, {25, SHIFT, 18}, {26, SHIFT, 19}, {27, SHIFT, 20}, },
			{{-1, ERROR, 30}, {0, SHIFT, 1}, {6, SHIFT, 2}, {10, SHIFT, 3}, {11, SHIFT, 4}, {12, SHIFT, 5}, {13, SHIFT, 6}, {14, SHIFT, 7}, {15, SHIFT, 8}, {16, SHIFT, 9}, {17, SHIFT, 10}, {18, SHIFT, 11}, {19, SHIFT, 12}, {20, SHIFT, 13}, {21, SHIFT, 14}, {22, SHIFT, 15}, {23, SHIFT, 16}, {24, SHIFT, 17}, {25, SHIFT, 18}, {26, SHIFT, 19}, {27, SHIFT, 20}, },
			{{-1, ERROR, 31}, {0, SHIFT, 1}, {6, SHIFT, 2}, {10, SHIFT, 3}, {11, SHIFT, 4}, {12, SHIFT, 5}, {13, SHIFT, 6}, {14, SHIFT, 7}, {15, SHIFT, 8}, {16, SHIFT, 9}, {17, SHIFT, 10}, {18, SHIFT, 11}, {19, SHIFT, 12}, {20, SHIFT, 13}, {21, SHIFT, 14}, {22, SHIFT, 15}, {23, SHIFT, 16}, {24, SHIFT, 17}, {25, SHIFT, 18}, {26, SHIFT, 19}, {27, SHIFT, 20}, },
			{{-1, ERROR, 32}, {0, SHIFT, 1}, {6, SHIFT, 2}, {10, SHIFT, 3}, {11, SHIFT, 4}, {12, SHIFT, 5}, {13, SHIFT, 6}, {14, SHIFT, 7}, {15, SHIFT, 8}, {16, SHIFT, 9}, {17, SHIFT, 10}, {18, SHIFT, 11}, {19, SHIFT, 12}, {20, SHIFT, 13}, {21, SHIFT, 14}, {22, SHIFT, 15}, {23, SHIFT, 16}, {24, SHIFT, 17}, {25, SHIFT, 18}, {26, SHIFT, 19}, {27, SHIFT, 20}, },
			{{-1, ERROR, 33}, {0, SHIFT, 1}, {6, SHIFT, 2}, {10, SHIFT, 3}, {11, SHIFT, 4}, {12, SHIFT, 5}, {13, SHIFT, 6}, {14, SHIFT, 7}, {15, SHIFT, 8}, {16, SHIFT, 9}, {17, SHIFT, 10}, {18, SHIFT, 11}, {19, SHIFT, 12}, {20, SHIFT, 13}, {21, SHIFT, 14}, {22, SHIFT, 15}, {23, SHIFT, 16}, {24, SHIFT, 17}, {25, SHIFT, 18}, {26, SHIFT, 19}, {27, SHIFT, 20}, },
			{{-1, ERROR, 34}, {0, SHIFT, 1}, {6, SHIFT, 2}, {10, SHIFT, 3}, {11, SHIFT, 4}, {12, SHIFT, 5}, {13, SHIFT, 6}, {14, SHIFT, 7}, {15, SHIFT, 8}, {16, SHIFT, 9}, {17, SHIFT, 10}, {18, SHIFT, 11}, {19, SHIFT, 12}, {20, SHIFT, 13}, {21, SHIFT, 14}, {22, SHIFT, 15}, {23, SHIFT, 16}, {24, SHIFT, 17}, {25, SHIFT, 18}, {26, SHIFT, 19}, {27, SHIFT, 20}, },
			{{-1, ERROR, 35}, {0, SHIFT, 1}, {6, SHIFT, 2}, {10, SHIFT, 3}, {11, SHIFT, 4}, {12, SHIFT, 5}, {13, SHIFT, 6}, {14, SHIFT, 7}, {15, SHIFT, 8}, {16, SHIFT, 9}, {17, SHIFT, 10}, {18, SHIFT, 11}, {19, SHIFT, 12}, {20, SHIFT, 13}, {21, SHIFT, 14}, {22, SHIFT, 15}, {23, SHIFT, 16}, {24, SHIFT, 17}, {25, SHIFT, 18}, {26, SHIFT, 19}, {27, SHIFT, 20}, },
			{{-1, ERROR, 36}, {0, SHIFT, 1}, {6, SHIFT, 2}, {10, SHIFT, 3}, {11, SHIFT, 4}, {12, SHIFT, 5}, {13, SHIFT, 6}, {14, SHIFT, 7}, {15, SHIFT, 8}, {16, SHIFT, 9}, {17, SHIFT, 10}, {18, SHIFT, 11}, {19, SHIFT, 12}, {20, SHIFT, 13}, {21, SHIFT, 14}, {22, SHIFT, 15}, {23, SHIFT, 16}, {24, SHIFT, 17}, {25, SHIFT, 18}, {26, SHIFT, 19}, {27, SHIFT, 20}, },
			{{-1, ERROR, 37}, {0, SHIFT, 1}, {6, SHIFT, 2}, {10, SHIFT, 3}, {11, SHIFT, 4}, {12, SHIFT, 5}, {13, SHIFT, 6}, {14, SHIFT, 7}, {15, SHIFT, 8}, {16, SHIFT, 9}, {17, SHIFT, 10}, {18, SHIFT, 11}, {19, SHIFT, 12}, {20, SHIFT, 13}, {21, SHIFT, 14}, {22, SHIFT, 15}, {23, SHIFT, 16}, {24, SHIFT, 17}, {25, SHIFT, 18}, {26, SHIFT, 19}, {27, SHIFT, 20}, },
			{{-1, ERROR, 38}, {0, SHIFT, 1}, {6, SHIFT, 2}, {10, SHIFT, 3}, {11, SHIFT, 4}, {12, SHIFT, 5}, {13, SHIFT, 6}, {14, SHIFT, 7}, {15, SHIFT, 8}, {16, SHIFT, 9}, {17, SHIFT, 10}, {18, SHIFT, 11}, {19, SHIFT, 12}, {20, SHIFT, 13}, {21, SHIFT, 14}, {22, SHIFT, 15}, {23, SHIFT, 16}, {24, SHIFT, 17}, {25, SHIFT, 18}, {26, SHIFT, 19}, {27, SHIFT, 20}, },
			{{-1, ERROR, 39}, {0, SHIFT, 1}, {6, SHIFT, 2}, {10, SHIFT, 3}, {11, SHIFT, 4}, {12, SHIFT, 5}, {13, SHIFT, 6}, {14, SHIFT, 7}, {15, SHIFT, 8}, {16, SHIFT, 9}, {17, SHIFT, 10}, {18, SHIFT, 11}, {19, SHIFT, 12}, {20, SHIFT, 13}, {21, SHIFT, 14}, {22, SHIFT, 15}, {23, SHIFT, 16}, {24, SHIFT, 17}, {25, SHIFT, 18}, {26, SHIFT, 19}, {27, SHIFT, 20}, },
			{{-1, ERROR, 40}, {0, SHIFT, 1}, {6, SHIFT, 2}, {10, SHIFT, 3}, {11, SHIFT, 4}, {12, SHIFT, 5}, {13, SHIFT, 6}, {14, SHIFT, 7}, {15, SHIFT, 8}, {16, SHIFT, 9}, {17, SHIFT, 10}, {18, SHIFT, 11}, {19, SHIFT, 12}, {20, SHIFT, 13}, {21, SHIFT, 14}, {22, SHIFT, 15}, {23, SHIFT, 16}, {24, SHIFT, 17}, {25, SHIFT, 18}, {26, SHIFT, 19}, {27, SHIFT, 20}, },
			{{-1, ERROR, 41}, {0, SHIFT, 1}, {6, SHIFT, 2}, {10, SHIFT, 3}, {11, SHIFT, 4}, {12, SHIFT, 5}, {13, SHIFT, 6}, {14, SHIFT, 7}, {15, SHIFT, 8}, {16, SHIFT, 9}, {17, SHIFT, 10}, {18, SHIFT, 11}, {19, SHIFT, 12}, {20, SHIFT, 13}, {21, SHIFT, 14}, {22, SHIFT, 15}, {23, SHIFT, 16}, {24, SHIFT, 17}, {25, SHIFT, 18}, {26, SHIFT, 19}, {27, SHIFT, 20}, },
			{{-1, ERROR, 42}, {10, SHIFT, 65}, },
			{{-1, ERROR, 43}, {0, SHIFT, 1}, {6, SHIFT, 2}, {10, SHIFT, 3}, {11, SHIFT, 4}, {12, SHIFT, 5}, {13, SHIFT, 6}, {14, SHIFT, 7}, {15, SHIFT, 8}, {16, SHIFT, 9}, {17, SHIFT, 10}, {18, SHIFT, 11}, {19, SHIFT, 12}, {20, SHIFT, 13}, {21, SHIFT, 14}, {22, SHIFT, 15}, {23, SHIFT, 16}, {24, SHIFT, 17}, {25, SHIFT, 18}, {26, SHIFT, 19}, {27, SHIFT, 20}, },
			{{-1, ERROR, 44}, {0, SHIFT, 1}, {6, SHIFT, 2}, {10, SHIFT, 3}, {11, SHIFT, 4}, {12, SHIFT, 5}, {13, SHIFT, 6}, {14, SHIFT, 7}, {15, SHIFT, 8}, {16, SHIFT, 9}, {17, SHIFT, 10}, {18, SHIFT, 11}, {19, SHIFT, 12}, {20, SHIFT, 13}, {21, SHIFT, 14}, {22, SHIFT, 15}, {23, SHIFT, 16}, {24, SHIFT, 17}, {25, SHIFT, 18}, {26, SHIFT, 19}, {27, SHIFT, 20}, },
			{{-1, ERROR, 45}, {0, SHIFT, 1}, {6, SHIFT, 2}, {10, SHIFT, 3}, {11, SHIFT, 4}, {12, SHIFT, 5}, {13, SHIFT, 6}, {14, SHIFT, 7}, {15, SHIFT, 8}, {16, SHIFT, 9}, {17, SHIFT, 10}, {18, SHIFT, 11}, {19, SHIFT, 12}, {20, SHIFT, 13}, {21, SHIFT, 14}, {22, SHIFT, 15}, {23, SHIFT, 16}, {24, SHIFT, 17}, {25, SHIFT, 18}, {26, SHIFT, 19}, {27, SHIFT, 20}, },
			{{-1, ERROR, 46}, {0, SHIFT, 1}, {6, SHIFT, 2}, {10, SHIFT, 3}, {11, SHIFT, 4}, {12, SHIFT, 5}, {13, SHIFT, 6}, {14, SHIFT, 7}, {15, SHIFT, 8}, {16, SHIFT, 9}, {17, SHIFT, 10}, {18, SHIFT, 11}, {19, SHIFT, 12}, {20, SHIFT, 13}, {21, SHIFT, 14}, {22, SHIFT, 15}, {23, SHIFT, 16}, {24, SHIFT, 17}, {25, SHIFT, 18}, {26, SHIFT, 19}, {27, SHIFT, 20}, },
			{{-1, ERROR, 47}, {0, SHIFT, 1}, {6, SHIFT, 2}, {10, SHIFT, 3}, {11, SHIFT, 4}, {12, SHIFT, 5}, {13, SHIFT, 6}, {14, SHIFT, 7}, {15, SHIFT, 8}, {16, SHIFT, 9}, {17, SHIFT, 10}, {18, SHIFT, 11}, {19, SHIFT, 12}, {20, SHIFT, 13}, {21, SHIFT, 14}, {22, SHIFT, 15}, {23, SHIFT, 16}, {24, SHIFT, 17}, {25, SHIFT, 18}, {26, SHIFT, 19}, {27, SHIFT, 20}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 49}, {1, SHIFT, 43}, {2, SHIFT, 44}, {7, SHIFT, 71}, },
			{{-1, ERROR, 50}, {1, SHIFT, 43}, {2, SHIFT, 44}, {7, SHIFT, 72}, },
			{{-1, ERROR, 51}, {1, SHIFT, 43}, {2, SHIFT, 44}, {7, SHIFT, 73}, },
			{{-1, ERROR, 52}, {1, SHIFT, 43}, {2, SHIFT, 44}, {7, SHIFT, 74}, },
			{{-1, ERROR, 53}, {1, SHIFT, 43}, {2, SHIFT, 44}, {7, SHIFT, 75}, },
			{{-1, ERROR, 54}, {1, SHIFT, 43}, {2, SHIFT, 44}, {7, SHIFT, 76}, },
			{{-1, ERROR, 55}, {1, SHIFT, 43}, {2, SHIFT, 44}, {8, SHIFT, 77}, },
			{{-1, ERROR, 56}, {1, SHIFT, 43}, {2, SHIFT, 44}, {7, SHIFT, 78}, },
			{{-1, ERROR, 57}, {1, SHIFT, 43}, {2, SHIFT, 44}, {7, SHIFT, 79}, },
			{{-1, ERROR, 58}, {1, SHIFT, 43}, {2, SHIFT, 44}, {7, SHIFT, 80}, },
			{{-1, ERROR, 59}, {1, SHIFT, 43}, {2, SHIFT, 44}, {7, SHIFT, 81}, },
			{{-1, ERROR, 60}, {1, SHIFT, 43}, {2, SHIFT, 44}, {7, SHIFT, 82}, },
			{{-1, ERROR, 61}, {1, SHIFT, 43}, {2, SHIFT, 44}, {7, SHIFT, 83}, },
			{{-1, ERROR, 62}, {1, SHIFT, 43}, {2, SHIFT, 44}, {7, SHIFT, 84}, },
			{{-1, ERROR, 63}, {1, SHIFT, 43}, {2, SHIFT, 44}, {7, SHIFT, 85}, },
			{{-1, ERROR, 64}, {1, SHIFT, 43}, {2, SHIFT, 44}, {7, SHIFT, 86}, },
			{{-1, ERROR, 65}, {9, SHIFT, 87}, },
			{{-1, REDUCE, 1}, {3, SHIFT, 45}, {4, SHIFT, 46}, {5, SHIFT, 47}, },
			{{-1, REDUCE, 2}, {3, SHIFT, 45}, {4, SHIFT, 46}, {5, SHIFT, 47}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 19}, },
			{{-1, ERROR, 77}, {0, SHIFT, 1}, {6, SHIFT, 2}, {10, SHIFT, 3}, {11, SHIFT, 4}, {12, SHIFT, 5}, {13, SHIFT, 6}, {14, SHIFT, 7}, {15, SHIFT, 8}, {16, SHIFT, 9}, {17, SHIFT, 10}, {18, SHIFT, 11}, {19, SHIFT, 12}, {20, SHIFT, 13}, {21, SHIFT, 14}, {22, SHIFT, 15}, {23, SHIFT, 16}, {24, SHIFT, 17}, {25, SHIFT, 18}, {26, SHIFT, 19}, {27, SHIFT, 20}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 87}, {0, SHIFT, 89}, },
			{{-1, ERROR, 88}, {3, SHIFT, 45}, {4, SHIFT, 46}, {5, SHIFT, 47}, {7, SHIFT, 90}, },
			{{-1, ERROR, 89}, {7, SHIFT, 91}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 26}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 21}, {2, 25}, {26, 49}, {27, 50}, {28, 51}, {29, 52}, {30, 53}, {31, 54}, {32, 55}, {33, 56}, {34, 57}, {35, 58}, {36, 59}, {37, 60}, {38, 61}, {39, 62}, {40, 63}, {41, 64}, },
			{{-1, 22}, {43, 66}, {44, 67}, {77, 88}, },
			{{-1, 23}, {45, 68}, {46, 69}, {47, 70}, },
			{{-1, 24}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: number, '(', var, '\sqrt', '\cos', '\sin', '\tan', '\exp', '\log', '\power', '\ln', '\acos', '\asin', '\atan', '\cosh', '\sinh', '\tanh', '\fact', '\cbrt', '\affect'",
			"expecting: '+', '-', '*', '/', '%', ')', ',', EOF",
			"expecting: '('",
			"expecting: '+', '-', EOF",
			"expecting: '+', '-', ')'",
			"expecting: var",
			"expecting: '+', '-', ','",
			"expecting: '='",
			"expecting: number",
			"expecting: '*', '/', '%', ')'",
			"expecting: ')'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 1, 1, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 1, 4, 4, 4, 4, 4, 4, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 9, 10, 1, 1, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
